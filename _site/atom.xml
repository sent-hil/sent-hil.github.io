<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Senthil Arivudainambi</title>
 <link href="http://sent-hil.com/atom.xml" rel="self"/>
 <link href="http://sent-hil.com/"/>
 <updated>2025-02-10T23:39:35-08:00</updated>
 <id>http://sent-hil.com/</id>
 <author>
   <name>Senthil Arivudainambi</name>
   <email>senthil196@gmail.com</email>
 </author>

 
 <entry>
   <title>Search In Postgres</title>
   <link href="http://sent-hil.com/2025/02/10/search-in-postgres.html"/>
   <updated>2025-02-10T00:00:00-08:00</updated>
   <id>http://sent-hil.com/2025/02/10/search-in-postgres</id>
   <content type="html">&lt;h1 id=&quot;search-in-postgres&quot;&gt;Search In Postgres&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;02 May, 2025&lt;/p&gt;

&lt;p&gt;It’s inevitable at some point you’ll need to implement user facing search on one of more fields in your database. I had to implement searching file and user given title for the file, but not the contents of the file.&lt;/p&gt;

&lt;p&gt;Here’s an example table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;files&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;document&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/documents/document.pdf&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;image&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/images/image.jpg&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;script&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/code/script.rb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re thinking that’s easy, Postgres has &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch.html&quot;&gt;full text search&lt;/a&gt;, yes that’s true, but that wouldn’t work in this scenarios where user might search partial names and also wouldn’t work with stop words like ‘a’.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_tsvector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;english&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_tsquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;english&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;document&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;----------&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_tsvector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;english&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_tsquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;english&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;doc&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-------&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_tsvector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;english&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_tsquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;english&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOTICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doesn&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;t contain lexemes, ignored
 title
-------
(0 rows)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, that’s not really full text search, but&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;doc%&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;----+-------------------------+----------&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;%c%&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;----+-------------------------+----------&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works great, but using wildcard in the beginning of the search query (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%c%&lt;/code&gt; ) means you can’t use BTree indexes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The optimizer can also use a B-tree index for queries involving the pattern matching operators &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIKE&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt; &lt;em&gt;if&lt;/em&gt; the pattern is a constant and is anchored to the beginning of the string — for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col LIKE &apos;foo%&apos;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col ~ &apos;^foo&apos;&lt;/code&gt;, but not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col LIKE &apos;%bar&apos;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: https://www.postgresql.org/docs/current/indexes-types.html#INDEXES-TYPES-BTREE&lt;/p&gt;

&lt;p&gt;The other option is to use trigrams through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_tgrm&lt;/code&gt; module, which works great however will only use index for searches 3 characters or more.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rate Limiter In Redis</title>
   <link href="http://sent-hil.com/2025/02/10/rate-limiter-in-redis.html"/>
   <updated>2025-02-10T00:00:00-08:00</updated>
   <id>http://sent-hil.com/2025/02/10/rate-limiter-in-redis</id>
   <content type="html">&lt;h1 id=&quot;rate-limiter-in-redis&quot;&gt;Rate Limiter In Redis&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;02 May, 2025&lt;/p&gt;

&lt;p&gt;Problem: External APIs limit the number of requests you can send during a time window. We should rate limit ourself instead of sending too many requests and running foul of their limits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation using counter&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check if rate limited, if not, increment counter.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; result indicates there were already &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rate_limit[:max]&lt;/code&gt; number of requests processed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rate_limit[:time_window_in_secs]&lt;/code&gt; window and can not proceed anymore.&lt;/li&gt;
  &lt;li&gt;Time complexity: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  local count = redis.call(&apos;GET&apos;, KEYS[1])
  if not count then
  -- EX: expire. This is the most important part of it.
    redis.call(&apos;SET&apos;, KEYS[1], 1, &apos;EX&apos;, tonumber(ARGV[1]))
    return
  end

-- rate limited
  if tonumber(count) &amp;gt;= tonumber(ARGV[2]) then
    return -1
  end

  redis.call(&apos;INCR&apos;, KEYS[1])
  return
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:time_window_in_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Implementation using counter, simpler than above&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of checking of key exists, set it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NX&lt;/code&gt;, which only sets if key does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
   -- set key to 0 if it doesn&apos;t exist with expiration
   local count = redis.call(&apos;SET&apos;, KEYS[1], 0, &apos;NX&apos;, &apos;GET&apos;, &apos;EX&apos;, tonumber(ARGV[1]))

   -- check if count is greater than max
   if count and tonumber(count) &amp;gt;= tonumber(ARGV[2]) then
     return -1
   end

   redis.call(&apos;INCR&apos;, KEYS[1])
   return
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KEY3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:time_window_in_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Only Redis 7+ supports using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NX&lt;/code&gt; options together in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SET&lt;/code&gt; command. For &amp;lt;7, need to get the value using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
   redis.call(&apos;SET&apos;, KEYS[1], 0, &apos;NX&apos;, &apos;EX&apos;, tonumber(ARGV[1]))

   local count = redis.call(&apos;GET&apos;, KEYS[1])
   if count and tonumber(count) &amp;gt;= tonumber(ARGV[2]) then
     return -1
   end

   redis.call(&apos;INCR&apos;, KEYS[1])
   return
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KEY3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:time_window_in_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Implementation using Sorted Set and Hash&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  local now = redis.call(&apos;TIME&apos;)[1]
  local buckets = redis.call(&apos;ZRANGEBYSCORE&apos;, KEYS[1], now-tonumber(ARGV[1]), now)

  if #buckets &amp;gt; 0 then
    local times = redis.call(&apos;HMGET&apos;, KEYS[2], unpack(buckets))
    local total = 1
    for i, count in ipairs(times) do
      total = total + count
    end
    if total &amp;gt; tonumber(ARGV[2]) then
      return -1
    end
  end

  redis.call(&apos;ZADD&apos;, KEYS[1], now, now)
  redis.call(&apos;HINCRBY&apos;, KEYS[2], now, 1)

  return now
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  local current_time = redis.call(&apos;TIME&apos;)
  redis.call(&apos;ZADD&apos;, KEYS[1], current_time[1], current_time[1] .. current_time[2])
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KEY1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Implementation with just Sorted Sets&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sliding_window_rate_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StrictRedis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;window_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;requests_made&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests_made&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zadd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zremrangebyscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-inf&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Source: https://collabnix.com/rate-limiting-in-redis-explained/&lt;/p&gt;

&lt;p&gt;Multiple things are wrong with the above implementation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using wall clock &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.time()&lt;/code&gt; in application code means requests from different computers that happen at the same time can have different time stored in the sorted set.&lt;/li&gt;
  &lt;li&gt;It’s not atomic; if another concurrent request happens between L5 and L6, it won’t be visible and you’ll go over the rate limit. Example of Read-Modify-Write.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.time()&lt;/code&gt; has granularity of 7 digits, ie &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1708891610.2391622&lt;/code&gt;. If two concurrent requests happen at the exact same time (as unlikely as it is), it’ll be counted just as 1.
    &lt;ul&gt;
      &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIME&lt;/code&gt; command in Redis will solve this, since Redis is single threaded and no two requests can have the same time.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZADD&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(log n)&lt;/code&gt; time complexity which might be too much for a highly active system. And it’s removing expired keys which has additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(log n + m)&lt;/code&gt; time complexity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Implementation using MULTI&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;nx: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RedisRateLimitError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LUA scripts have the following problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Doesn’t work with any of the layer 7 redis proxies (twemproxy, etc) used for HA.&lt;/li&gt;
  &lt;li&gt;Can’t test it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MockRedis&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Blocks main Redis thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By using MULTI we can avoid that, while still ensuring you’re not going over limit. The downside is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; value can get over max since we’re incrementing regardless.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing LaTeX-OCR On Osx</title>
   <link href="http://sent-hil.com/2024/11/23/installing-latexocr-on-osx.html"/>
   <updated>2024-11-23T00:00:00-08:00</updated>
   <id>http://sent-hil.com/2024/11/23/installing-latexocr-on-osx</id>
   <content type="html">&lt;h1 id=&quot;installing-latex-ocr-on-osx&quot;&gt;Installing LaTeX-OCR On Osx&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;11 May, 2024&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lukas-blecher/LaTeX-OCR&quot;&gt;LaTeX-OCR&lt;/a&gt; is a library for
converting images to LATEX code. I recently had to reinstall it and ran into
some issues. I’m documenting them here so it can help someone else.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install conda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install miniconda&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install conda to start with your shell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Activate a new conda environment: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda create -n latexocr python=3.11&lt;/code&gt;. If&lt;/li&gt;
  &lt;li&gt;Install with right qt version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install qt=6.6.3 &quot;pix2tex[gui]&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks to this &lt;a href=&quot;https://github.com/lukas-blecher/LaTeX-OCR/issues/390&quot;&gt;post&lt;/a&gt; for fixing issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt; installation.&lt;/p&gt;

&lt;p&gt;I also added this fish helper function to start with a single
command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latexocr&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;latexocr
    conda_init
    conda activate latexocr
    /opt/homebrew/Caskroom/miniconda/base/envs/latexocr/bin/latexocr
end

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;conda_init
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /opt/homebrew/Caskroom/miniconda/base/bin/conda
        &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; /opt/homebrew/Caskroom/miniconda/base/bin/conda &lt;span class=&quot;s2&quot;&gt;&quot;shell.fish&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hook&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$argv&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;source
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else
        if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/opt/homebrew/Caskroom/miniconda/base/etc/fish/conf.d/conda.fish&quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/opt/homebrew/Caskroom/miniconda/base/etc/fish/conf.d/conda.fish&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; PATH &lt;span class=&quot;s2&quot;&gt;&quot;/opt/homebrew/Caskroom/miniconda/base/bin&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>This blog post was generated by ChatGPT</title>
   <link href="http://sent-hil.com/2023/03/20/chatgpt-generated-blog-post.html"/>
   <updated>2023-03-20T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2023/03/20/chatgpt-generated-blog-post</id>
   <content type="html">&lt;h1 id=&quot;this-blog-post-was-generated-by-chatgpt&quot;&gt;This blog post was generated by ChatGPT&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;20 March, 2023&lt;/p&gt;

&lt;p&gt;A few days ago, I was trying to set up Jasmine to output the description of the
tests while running it. It wasn’t as straightforward as passing in a command
line argument, so I turned to everyone’s favorite boogeyman, ChatGPT, to help.
Here is the &lt;a href=&quot;https://gpt.best/c0JV9sJt&quot;&gt;complete conversation&lt;/a&gt;. TLDR: It helped,
but I had to hand-hold it a few times.&lt;/p&gt;

&lt;p&gt;In the end, I asked ChatGPT to generate a blog post with my findings, and
here’s what it outputted.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When working with Jasmine for testing JavaScript applications, you may want to
have a global configuration that automatically includes a custom reporter, such
as jasmine-spec-reporter, for all your projects. This blog post will guide you
through the process of setting up a global Jasmine configuration file and using
the custom reporter to display test results in a more human-readable format.&lt;/p&gt;

&lt;p&gt;Step 1: Install jasmine-spec-reporter&lt;/p&gt;

&lt;p&gt;First, you’ll need to install the jasmine-spec-reporter package globally:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; jasmine-spec-reporter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step 2: Create a global Jasmine configuration file&lt;/p&gt;

&lt;p&gt;Next, create a global Jasmine configuration file named jasmine-global.json. You
can store this file in a convenient location, such as your home directory. In
this file, specify the helpers key with an absolute path to a custom helper
file that will configure the reporter:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/path/to/your/req-jasmine-reporter.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace /path/to/your with the correct path to the directory where you’ll store
the req-jasmine-reporter.js file.&lt;/p&gt;

&lt;p&gt;Step 3: Create the custom helper file&lt;/p&gt;

&lt;p&gt;Now, create a file named req-jasmine-reporter.js in the directory specified in
the previous step. This file will configure the jasmine-spec-reporter. Add the
following code to the file:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpecReporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;jasmine-spec-reporter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SpecReporter&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;jasmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clearReporters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;jasmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addReporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpecReporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;displayPending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;displayStacktrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step 4: Set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JASMINE_CONFIG_PATH&lt;/code&gt; environment variable&lt;/p&gt;

&lt;p&gt;To tell Jasmine to use your global configuration file, set an environment
variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JASMINE_CONFIG_PATH&lt;/code&gt; to the path of your jasmine-global.json
file.&lt;/p&gt;

&lt;p&gt;For Unix-based systems, add the following line to your shell profile file
(e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;, etc.):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JASMINE_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/path/to/your/jasmine-global.json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Windows, open the Environment Variables dialog (search for “Environment
Variables” in the Start menu) and add a new user or system variable named
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JASMINE_CONFIG_PATH&lt;/code&gt; with the value set to the path of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jasmine-global.json&lt;/code&gt;
file.&lt;/p&gt;

&lt;p&gt;Step 5: Run Jasmine tests with the custom reporter&lt;/p&gt;

&lt;p&gt;Now, when you run Jasmine tests using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npx jasmine &amp;lt;file&amp;gt;&lt;/code&gt;, the test
results will be displayed using the jasmine-spec-reporter with your specified
configuration.&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;p&gt;By following these steps, you can create a global Jasmine configuration that
includes a custom reporter for all your projects. This setup can help you
maintain consistent test output formatting and streamline your testing process.
Keep in mind that using a global configuration may not be suitable for every
project, especially when working with multiple developers or projects with
different dependencies. In such cases, it’s recommended to maintain separate
configurations for each project.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The result is boring, to the point and devoid of personality, but it gets the job done.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ALERTWildfire</title>
   <link href="http://sent-hil.com/2020/08/20/alertwildfire.html"/>
   <updated>2020-08-20T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2020/08/20/alertwildfire</id>
   <content type="html">&lt;h1 id=&quot;alertwildfire&quot;&gt;ALERTWildfire&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;08 May, 2020&lt;/p&gt;

&lt;p&gt;My past time the last few hours has been switching through the various live webcam feeds on http://www.alertwildfire.org and checking if I can catch a glimpse of smoke or the various fires that are burning up in California right now.&lt;/p&gt;

&lt;iframe width=&quot;800&quot; height=&quot;500&quot; src=&quot;https://www.youtube.com/embed/LnhNYWkGkPg?color=white&amp;amp;theme=light\&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The above video was taken two days ago by one of the webcams located south of Boulder Creek, California. You can see the CZU Ligtning Complex fire creeping up and eventually destroy it.&lt;/p&gt;

&lt;p&gt;Here are few interesting feeds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alertwildfire.org/southeastbay/index.html?camera=Axis-Oso&amp;amp;v=81e002f&quot;&gt;Link1&lt;/a&gt; - shows the north portion of SCU fires. Looked like Mars around sunset today. This is the only webcam that’s consistently looking at the SCU fires.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alertwildfire.org/southeastbay/index.html?camera=Axis-MtBielawski&amp;amp;v=81e002f&quot;&gt;Link2&lt;/a&gt; - can see CZU fire.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alertwildfire.org/southeastbay/index.html?camera=Axis-MtRodoni2&amp;amp;v=81e002f&quot;&gt;Link3&lt;/a&gt; - can smoke from the CZU fire, as that fire moves south, this webcam should catch it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alertwildfire.org/southeastbay/index.html?camera=Axis-SanJoseFoothills&amp;amp;v=81e002f&quot;&gt;Link4&lt;/a&gt; - shows south east of san jose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have also been staring at &lt;a href=&quot;https://maps.nwcg.gov/sa/#/%3F/%3F/37.176/-122.0395/11&quot;&gt;this&lt;/a&gt; which I belive uses satellite to detect the boundaries of the fires. As you can see, a lot of Norther California is burning. The closest fire at the moment is the SCU fire, about 10 miles south of my current location. Good news for people north of the fires like me is the wind is blowing south west. Bad news for everyone south of the fire.&lt;/p&gt;

&lt;p&gt;Thank you to The University of Nevada, Reno (UNR), University of California San Diego (UCSD), and the University of Oregon (UO) which run ALERTWildfire and the various sponors of the webcams.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dokku powered personal hub</title>
   <link href="http://sent-hil.com/2020/07/13/a-new-setup-for-this-site.html"/>
   <updated>2020-07-13T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2020/07/13/a-new-setup-for-this-site</id>
   <content type="html">&lt;h1 id=&quot;dokku-powered-personal-hub&quot;&gt;Dokku powered personal hub&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;07 May, 2020&lt;/p&gt;

&lt;p&gt;Last July 4th weekend I took some time to redo the setup for sent-hil.com. Previously it was Jekyll app running on Github pages. For the amount of blogging I did and traffic it received, it was more than enough. However I wanted to convert sent-hil.com to be a hub for different apps. My first attempt was to use AWS ECS to deploy dockers containers, but after couple days of struggling I gave up. I tried GCP, which was more fruitful, but ultimately I ran into some technical issues.&lt;/p&gt;

&lt;p&gt;At that point I gave up wth a hosted solution and started looking around for a DIY solution and ultimately found &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;dokku&lt;/a&gt;. It took couple hours to figure it out and this is the &lt;a href=&quot;https://github.com/sent-hil/sent-hil.com&quot;&gt;result of it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repo contains the following folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;terraform - contains terraform scripts to bring up a VPC with RDS and EC2 instance.&lt;/li&gt;
  &lt;li&gt;blog - Jekyll app that powers the root &lt;a href=&quot;sent-hil.com&quot;&gt;sent-hil.com&lt;/a&gt; (public).&lt;/li&gt;
  &lt;li&gt;graph - &lt;a href=&quot;https://hasura.io&quot;&gt;Hasura&lt;/a&gt; app (private).&lt;/li&gt;
  &lt;li&gt;stats - &lt;a href=&quot;https://www.goatcounter.com&quot;&gt;Goatcounter&lt;/a&gt; app (private) for analytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To deploy I do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push dokku master&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;downsides&quot;&gt;Downsides&lt;/h2&gt;

&lt;p&gt;This setup is horizontally challenged. dokku has some support for K8/Nomad, but it seems experiemental and I couldn’t find documentation to get started. This setup will last me for a long time. Worst case I will vertically scale the instance.&lt;/p&gt;

&lt;p&gt;Overrall I’m pretty happy with the setup. It’s fairly easy to manage, cheap and I can always ssh into the instance to debug. That’s something I sorely missed when trying to work with the hosted solutions.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>sqlite3.h Is Missing When Doing 'gem install sqlite3' In Mojave OSX</title>
   <link href="http://sent-hil.com/2019/03/13/sqlite3.h-is-missing-when-doing-gem-install-sqlite3-in-mojave-osx.html"/>
   <updated>2019-03-13T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2019/03/13/sqlite3.h-is-missing-when-doing-gem-install-sqlite3-in-mojave-osx</id>
   <content type="html">&lt;h1 id=&quot;sqlite3h-is-missing-when-doing-gem-install-sqlite3-in-mojave-osx&quot;&gt;sqlite3.h Is Missing When Doing ‘gem install sqlite3’ In Mojave OSX&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;03 May, 2019&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching sqlite3 1.3.12
Installing sqlite3 1.3.12 with native extensions
Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

extconf.rb
checking for sqlite3.h... no
sqlite3.h is missing. Try &apos;brew install sqlite3&apos;,
&apos;yum install sqlite-devel&apos; or &apos;apt-get install libsqlite3-dev&apos;
and check your shared library search path (the
location where your sqlite3 shared library is located).
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install sqlite3&lt;/code&gt; fails, you probably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Haven’t agreed to XCode license: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Missing sqlite3 homebrew package. You can do with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install sqlite3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Need to install with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install sqlite3 -- --with-sqlite3-dir=/opt/local&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Week-07-links</title>
   <link href="http://sent-hil.com/2018/02/17/week-07-links.html"/>
   <updated>2018-02-17T00:00:00-08:00</updated>
   <id>http://sent-hil.com/2018/02/17/week-07-links</id>
   <content type="html">&lt;h1 id=&quot;week-07-links&quot;&gt;Week-07-links&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;2018-02-17&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/WalkerAndCoBrandsInc/ghhook&quot;&gt;ghhook&lt;/a&gt;: “Go library that makes working with Github webhooks delivered with AWS APIGateway easier.” NOTE, this is mine :) It started as few one off scripts, run as AWS Lambda function, to help automate some tasks based on Github webhooks at work; eventually extracted out some common functionality into this library.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;serverless.com&quot;&gt;serverless&lt;/a&gt;: “Folder specific env variable config; especially useful for managing multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOBIN&lt;/code&gt;”. Using this to deploy the scripts written with the above project. I made a Lambda function from scratch which took forever, with serverless it took less than a minute. Only downside is updating functions take longer since it does entire Cloudformation stack update vs just uploading a Lambda function. I’m not entirely sold on the serverless architecture to be honest, it’s quite tedious to even do/debug basic stuff, serverless makes some it easier.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/go-task/task&quot;&gt;task&lt;/a&gt;: “A task runner / simpler Make alternative written in Go.” I never took the time to properly learn make and whenever I spend some time with it I always end up quitting scratching my head. I’m a huge fan of &lt;a href=&quot;https://github.com/ruby/rake&quot;&gt;rake&lt;/a&gt; for Rails projects, but for others the overhead is too much. Found this make alternative where you specify commands in yaml. It also has common features like accessing env variables, task depedency etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://graphql.org&quot;&gt;graphql&lt;/a&gt;: “A query language created by Facebook in 2012 for describing the capabilities and requirements of data models for client-server applications.” I feel out of date for discovering this just now. It’s quite neat actually. Been playing with Github Graphql(https://developer.github.com/v4/explorer/).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://abe-winter.github.io/change/2017/05/05/pattons-sword.html&quot;&gt;Patton’s Sword&lt;/a&gt;: Compares Patton’s carrer’s as cavalary saber designer and commander of tank division in WW1 with present day. I don’t think I’ll do it any more justice explaining it here, so go read it!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/fogleman/primitive&quot;&gt;Primitive&lt;/a&gt;: “Reproducing images with geometric primitives.” Words won’t do it justice, go generate some images with it. I’ve been posting selfies reproduced with this on my &lt;a href=&quot;https://www.instagram.com/senthil196/&quot;&gt;Instagram&lt;/a&gt;…yet another reason to follow me and join my huge army of followers (last count 57 bots).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Challenge - use api docs more than Google or Stackoverflow</title>
   <link href="http://sent-hil.com/2018/01/16/challenge-use-api-docs-more-than-google-or-stackoverflow.html"/>
   <updated>2018-01-16T00:00:00-08:00</updated>
   <id>http://sent-hil.com/2018/01/16/challenge-use-api-docs-more-than-google-or-stackoverflow</id>
   <content type="html">&lt;h1 id=&quot;challenge---use-api-docs-more-than-google-or-stackoverflow&quot;&gt;Challenge - use api docs more than Google or Stackoverflow&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;2018-01-16&lt;/p&gt;

&lt;p&gt;Few days ago I challenged myself to not use Google or Stackoverflow, but to check the language/api docs whenever I need to lookup something. This is part of my other long running project to remove abstractions and move closer to the core. I’m hoping this lets me better understand the code and be more idiomatic.&lt;/p&gt;

&lt;p&gt;For Go, there’s https://godoc.org, which is an easily accessible way to browse the library signatures. In Ruby, there’s http://ruby-doc.org/ for standard library docs and http://www.rubydoc.info for library specific docs, though I find I use far less, generally I just Google it (especially when it comes to Rails) or I go into the source directly with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle open &amp;lt;gem&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily for Ruby and other languages there’s &lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;. Dash helps you navigate docus of different languages with just a keyboard. For standard libraries, Dash is now my go to source, for libraries it’s less than ideal. I’ve been &lt;a href=&quot;https://github.com/sent-hil/go-dashgen&quot;&gt;experimenting&lt;/a&gt; with auto generating docs per project that can be used in Dash, but haven’t made much progress yet. Will keep you posted.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Programming Arduino with Assembly</title>
   <link href="http://sent-hil.com/2016/10/23/arduino-assembly.html"/>
   <updated>2016-10-23T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2016/10/23/arduino-assembly</id>
   <content type="html">&lt;h1 id=&quot;programming-arduino-with-assembly&quot;&gt;Programming Arduino with Assembly&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;23 Oct 2016&lt;/p&gt;

&lt;p&gt;Arduino is typically programmed with Arduino IDE with a set of C/C++ functions.
The canonical blink sketch which turns a led on/off every 1 second looks like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void setup() {
  pinMode(13, OUTPUT);      // initialize digital pin 13 as an output
}

void loop() {
  digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);              // wait for a second
  digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);              // wait for a second
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pinMode&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digitalWrite&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delay&lt;/code&gt; functions are defined by the Arduino
standard library. For the most part this works pretty well, and there are plenty
of libraries and example sketches.&lt;/p&gt;

&lt;p&gt;For the sake of getting close to the metal, let’s write the above sketch in
assembly instead. Before we do that we need to install couple depedencies. Assuming you’re on OSX and you have brew install you’ll need to do:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap osx-cross/avr
brew install avr-libc avrdude
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s an example from
&lt;a href=&quot;https://www.cypherpunk.at/2014/09/native-assembler-programming-on-arduino/&quot;&gt;here&lt;/a&gt;.
Save it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simple_led_blink.s&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.equ RAMEND, 0x8ff
.equ SREG, 0x3f
.equ SPL, 0x3d
.equ SPH, 0x3e
.equ PORTB, 0x05
.equ DDRB, 0x04
.equ PINB, 0x03

.org 0
rjmp main

main:
  ldi r16,0     ; reset system status
  out SREG,r16  ; init stack pointer
  ldi r16,lo8(RAMEND)
  out SPL,r16
  ldi r16,hi8(RAMEND)
  out SPH,r16

  ldi r16,0x20  ; set port bits to output mode
  out DDRB,r16

  clr r17

mainloop:
  eor r17,r16   ; invert output bit
  out PORTB,r17 ; write to port
  call wait     ; wait some time
  rjmp mainloop ; loop forever

wait:
  push r16
  push r17
  push r18

  ldi r16,0x40 ; loop 0x400000 times
  ldi r17,0x00 ; ~12 million cycles
  ldi r18,0x00 ; ~0.7s at 16Mhz

_w0:
  dec r18
  brne _w0
  dec r17
  brne _w0
  dec r16
  brne _w0

  pop r18
  pop r17
  pop r16
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Explaining what the above assembly code does is out of scope of this small blog
post.&lt;/p&gt;

&lt;p&gt;Now connect your Arduino to your computer with usb and run the following
commands from your terminal:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;avr-as -g -mmcu=atmega328p -o simple_led_blink.o simple_led_blink.s
avr-ld -o simple_led_blink.elf simple_led_blink.o
avr-objcopy -O ihex -R .eeprom simple_led_blink.elf simple_led_blink.hex
avrdude  -p atmega328p -c arduino -P /dev/tty.usbmodem14221 -b 115200 -D -U flash:w:simple_led_blink.hex:i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll most likely need to change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/tty.usbmodem14221&lt;/code&gt; to whatever usb port
your Arduino is connected to. To find which one run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls /deve/tty.*&lt;/code&gt; and pick
the one without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bluetooth&lt;/code&gt; in the file name.&lt;/p&gt;

&lt;p&gt;Most of the above instructions are from
&lt;a href=&quot;https://www.cypherpunk.at/2014/09/native-assembler-programming-on-arduino/&quot;&gt;here&lt;/a&gt;,
frankly without it this process would’ve been much longer and way more tedious.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Single vs Double dash in cli args</title>
   <link href="http://sent-hil.com/2016/05/28/single-vs-double-dash-in-cli-args.html"/>
   <updated>2016-05-28T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2016/05/28/single-vs-double-dash-in-cli-args</id>
   <content type="html">&lt;h1 id=&quot;single-vs-double-dash-in-cli-args&quot;&gt;Single vs Double dash in cli args&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;28 May 2016&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It all depends on the program. Usually “-“ is used for ‘short’ options
(one-letter, -h), and “–” is used for “long”(er) options (–help).&lt;/p&gt;

  &lt;p&gt;Short options can usually be combined (so “-h -a” is same as “-ha”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://serverfault.com/a/387938&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One exception I found was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; which uses single dash, but full names like
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find /usr/src -name CVS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;– is not in POSIX, but GNU recommends it and it makes for better readability.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Links</title>
   <link href="http://sent-hil.com/2016/05/25/links.html"/>
   <updated>2016-05-25T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2016/05/25/links</id>
   <content type="html">&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;25 May 2016&lt;/p&gt;

&lt;p&gt;This link collection is predominantly filesystems; they have been mostly on my mind the last couple weeks, especially network and virtual filesytems like Camilstore, Infinit Storage and Tahoe-LAFS. There are ton of options, but there is also plenty of oppurtunities.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://camlistore.org&quot;&gt;Camlistore&lt;/a&gt; - personal storage system for life; stands for Content-Addressable Multi-Layer Indexed Storage, the idea is to dump whatever you prefer onto it (objects, files etc.) and access them with various interfaces (browser, fuse, phone etc.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://keybase.io&quot;&gt;Keybase&lt;/a&gt; - maps your identity to your public keys; similar to what Github is to git. I am https://keybase.io/senthil196. They also have keybase-filesystem which is “Public, signed directories for everyone in the world”. It sounds interesting, waiting for my invite to kbfs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://infinit.sh/&quot;&gt;Infinit Storage&lt;/a&gt; - decentralized software‑based file storage platform&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tahoe-lafs.org/trac/tahoe-lafs&quot;&gt;Tahoe-LAFS&lt;/a&gt; - free and Open decentralized cloud storage system; preceds Infinit Storage.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction&quot;&gt;Reed–Solomon error correction&lt;/a&gt; - group of error-correcting codes; has multipe use cases, including in data storage where it is used to detect corrupted data and correct upto x data based on original configuration.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dancres.github.io/Pages&quot;&gt;A Distributed Systems Reading List&lt;/a&gt; - looks promising, hoping to go through them soon.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The 1 in cat(1)</title>
   <link href="http://sent-hil.com/2015/09/05/1-in-cat(1).html"/>
   <updated>2015-09-05T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2015/09/05/1-in-cat(1)</id>
   <content type="html">&lt;h1 id=&quot;the-1-in-cat1&quot;&gt;The 1 in cat(1)&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;5 Sept 2015 2.35p&lt;/p&gt;

&lt;p&gt;When you do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man cat&lt;/code&gt;, you get an output like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CAT(1)                    BSD General Commands Manual                   CAT(1)

NAME
    cat -- concatenate and print files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ever wonder what the 1 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAT(1)&lt;/code&gt; stands for? It’s the section for command as defined in &lt;a href=&quot;http://plan9.bell-labs.com/7thEdMan/v7vol1.pdf&quot;&gt;Unix Programmer’s manual&lt;/a&gt;. Here’re the sections:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Commands
2. System calls
3. Subroutines
4. Special files
5. File formats and conventions
6. Games
7. Macro packages and language conventions
8. Maintenance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Links</title>
   <link href="http://sent-hil.com/2015/08/31/links.html"/>
   <updated>2015-08-31T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2015/08/31/links</id>
   <content type="html">&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;31 Aug 2015&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/direnv/direnv&quot;&gt;direnv&lt;/a&gt;: Folder specific env variable config; especially useful for managing multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOBIN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/koding/multiconfig&quot;&gt;multiconfig&lt;/a&gt;: Load configuration from multiple sources in Go; Only thing missing is ability to specify description for various config.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/The-Power-Habit-What-Business/dp/081298160X&quot;&gt;Power of Habit&lt;/a&gt;: The best self help book isn’t a self help book at all. It’s more of an inquiry into how habits are formed and how to change them. In one of the chapters, there’s talk of ‘keystone habit’, ie something that enables you to change your life for the better. Usually it’s exercise. But for me it’s putting everything into writing. Goals, lists, todos etc.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Here we go again</title>
   <link href="http://sent-hil.com/2015/08/31/here-we-go-again.html"/>
   <updated>2015-08-31T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2015/08/31/here-we-go-again</id>
   <content type="html">&lt;h1 id=&quot;here-we-go-again&quot;&gt;Here we go again&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;31 Aug 2015&lt;/p&gt;

&lt;p&gt;It’s been a while since I’ve maintained a blog seriously. After flirting with Ghost, Medium and even Github’s gists, I settled on Jekyll for its ease of use and customization. This is going to be a more of a braindump, somewhere between Twitter and Medium.&lt;/p&gt;

&lt;p&gt;Like most Jekyll blog this too is hosted on &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;. You can view the source &lt;a href=&quot;https://github.com/sent-hil/sent-hil.github.io&quot;&gt;here&lt;/a&gt;. The design is originally from &lt;a href=&quot;https://github.com/mojombo/mojombo.github.io&quot;&gt;Tom Preston-Werner&lt;/a&gt;. I forked the original repo and made some minor changes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Consistent hashing, a guide & Go library</title>
   <link href="http://sent-hil.com/2015/04/22/consistent-hashing.html"/>
   <updated>2015-04-22T00:00:00-07:00</updated>
   <id>http://sent-hil.com/2015/04/22/consistent-hashing</id>
   <content type="html">&lt;h1 id=&quot;consistent-hashing-a-guide--go-library&quot;&gt;Consistent hashing, a guide &amp;amp; Go library&lt;/h1&gt;

&lt;p&gt;Consistent hashing is deceptively simple yet very powerful, but I didn’t quite
understand what it was till I sat down and worked it out for myself. Before I
tell you about consistent hashing, you need to understand the problem we’re
trying to solve:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1440/1*AHzeEycsTXnNAkgojeixxA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How to determine which server to store and retrieve keys in a distributed
network? Requirements are: all nodes get relatively equal number of keys, be
able to add and remove nodes such as fewest number of keys are moved around.&lt;/p&gt;

&lt;p&gt;Let’s assume couple things: There are four servers in the network: Chico, Harpo,
Groucho and Zeppo. All four servers are identical, but have no knowledge of each
other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1440/1*JSsWI9-0SS35tKX6GjmaDg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To keep things simple in this example the keys are incrementing integers.
Usually you run the key against a checksum to return a number. Once you have
that number, you can take the modulo of that number against the number of nodes.
This works surprisingly when the network is stable, ie no nodes are leaving or
joining the network.&lt;/p&gt;

&lt;p&gt;But, what happens if a node, ie Harpo goes down, like he’s always prone to
doing. Then we’ve a big problem. Using the same hash function, we get the same
result, but apply modulo operation we get different results than before, since
the number of nodes is reduced by one.&lt;/p&gt;

&lt;p&gt;Note how nearly all the keys from all nodes need to be remapped as well. This
make no sense, why should the keys that in servers that are functioning properly
have to be remapped?! Do you share my exclamation yet? Well now we’ve arrived at
the need for consistent hashing.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Consistent hashing&lt;/strong&gt; is a special kind of hashing such that when a hash table
is resized and consistent hashing is used, only K/n keys need to be remapped on
average, where K is the number of keys, and n is the number of slots.&lt;br /&gt;
Source:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Consistent_hashing&quot;&gt;https://en.wikipedia.org/wiki/Consistent_hashing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we had used consistent hashing above, then only the keys from Harpo need to
be moved around. Usually this is when most posts include a picture of an unit
circle and explain it in terms of that. Let’s do it:&lt;/p&gt;

&lt;p&gt;For time being ignore how the nodes were placed onto the unit circle. Instead of
applying modulo function on the hash of the key, let’s map the hash onto the
unit circle. (I know this is hand waving, but we’ll get to the implementation
soon enough). To determine which node the key maps to, we simply go clockwise
till we find a node. So for key 1, Harpo is the node it should be stored and
retrieved from.&lt;/p&gt;

&lt;p&gt;So what if Harpo goes down? You’ll need to get and retrieve key 1 from a
different node, however note how rest of the key mappings haven’t changed. The
only keys that have changed are the ones that used to live in Harpo node. Voila!
This works if you add new nodes as well. Say you add Gummo to the network. You
don’t need to change the residence of existing keys.&lt;/p&gt;

&lt;p&gt;Consistent hashing also covers situations where nodes differ in size. What you
do is create virtual nodes and make them onto the unit circle. Depending on the
hash function you chose, the virtual nodes can be made to place randomly on the
unit circle. For nodes with more capacity, you should add more virtual nodes.
This way when a node goes down, the keys are distributed evenly across other
nodes, not just to the next one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s go the extra mile here and implement a consistent hash library in Go. I
didn’t quite understand it till I found a good implementation and put print
statements everywhere and changed the code. This implementation is heavily
inspired by &lt;a href=&quot;https://github.com/stathat/consistent&quot;&gt;stathat’s&lt;/a&gt; implementation.
The original paper calls for using trees for implementation, however I prefer
the way stathat did it.&lt;/p&gt;

&lt;p&gt;Let’s define a bird’s eye view:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Initializes new distribute network of nodes or a ring.
func NewRing() *Ring

// Adds node to the ring.
func (r *Ring) AddNode(id string)

// Removes node from the ring if it exists, else returns
// ErrNodeNotFound.
func (r *Ring) RemoveNode(id string) error

// Gets node which is mapped to the key. Return value is identifer
// of the node given in `AddNode`.
func (r *Ring) Get(key string) string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll use &lt;a href=&quot;https://golang.org/pkg/hash/crc32/&quot;&gt;crc32&lt;/a&gt; for generating a
checksum of the key. Explaining what crc32 does and how it does it is beyond
scope of this blog post. Just know that given an input, it returns a 32 uint.
Input in this case is the ipaddress of the node.&lt;/p&gt;

&lt;p&gt;The gist of it is we use an array to hold the result of node id checksums. For
each key we run the checksum and determine the position the key should be added
and return the node closet to that. If it’s out of bounds of array, we return
the first node.&lt;/p&gt;

&lt;p&gt;First, let’s define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ring&lt;/code&gt;, which is just a collection of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package consistenthash

// Ring is a network of distributed nodes.
type Ring struct {
  Nodes Nodes
}

// Nodes is an array of nodes.
type Nodes []Node

// Node is a single entity in a ring.
type Node struct {
 Id     string
 HashId uint32
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s write the initializer functions for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ring&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package consistenthash

func NewRing() *Ring {
  return &amp;amp;Ring{Nodes : Nodes{}}
}

func NewNode(id string) *Node{
  return &amp;amp;Node{
    Id        : id,
    hashedKey : crc32.Checksum([]byte(id)),
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’re finally ready to fill in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddNode&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (r *Ring) AddNode(id string) {
  node := NewNode(id)
  r.Nodes = append(r.Nodes, node)

  sort.Sort(r.Nodes)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort.Sort&lt;/code&gt;? This goes back to the unit circle. How exactly do you implement
an unit circle? One way is to have an array with the last item pointing to the
first item in the entry. We can use a linked list for this, but you’ll see soon
enough why that’s unnecessary.&lt;/p&gt;

&lt;p&gt;If you run what we’ve so far, Go compiler will throw something at you because
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nodes&lt;/code&gt; doesn’t implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort.Sort&lt;/code&gt; interface. That’s pretty easy to do:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package consistenthash

func (n Nodes) Len() int           { return len(n) }
func (n Nodes) Less(i, j int) bool { return n[i].HashId &amp;lt; n[j].HashId }
func (n Nodes) Swap(i, j int)      { n[i], n[j] = n[j], n[i] }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s continue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get&lt;/code&gt; which is the point of this all:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (r *Ring) Get(key string) string {
  searchfn := func(i int) bool {
    return r.Nodes[i].HashId &amp;gt;= crc32.Checksum([]byte(key))
  }

  i := sort.Search(r.Nodes.Len(), searchfn)
  if i &amp;gt;= r.Nodes.Len() {
    i = 0
  }

  return r.Nodes[i].Id
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/sort/#Search&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort.Search&lt;/code&gt;&lt;/a&gt; uses binary search to find
exitense of node in array. If it doesn’t exist, it returns the place where the
node should be added if we were to add it. If the node cheksum is greater than
the last node, then we add it to the first node. And that’s it.&lt;/p&gt;

&lt;p&gt;If you want to check the rest of the code, it’s open sourced
&lt;a href=&quot;https://github.com/sent-hil/consistenthash&quot;&gt;here&lt;/a&gt;, along with some tests.&lt;/p&gt;

&lt;p&gt;Remember how it told you in the beginning consistent hashing was deceptively
simple, yet powerful? Believe me yet? You should know consistent hashing was
first introduce in a &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=7&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CFIQFjAG&amp;amp;url=http://www.akamai.com/dl/technical_publications/ConsistenHashingandRandomTreesDistributedCachingprotocolsforrelievingHotSpotsontheworldwideweb.pdf&amp;amp;ei=6IVAVbq9HcX6oQThqYHgDg&amp;amp;usg=AFQjCNH2IBIOHYdoFYZae_kJsR4-H-_m-A&amp;amp;bvm=bv.91665533,d.cGU&quot;&gt;paper by
Akamai&lt;/a&gt;
who know a thing or two about distributed systems. An improved version of
consistent hashing is used in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Chord_(peer-to-peer)&quot;&gt;Chord&lt;/a&gt; algorithm which is a
distributed hash table. (earlier version said Chord is behind Amazon dynamodb,
&lt;a href=&quot;https://twitter.com/ernesto_jimenez/status/593550482737635328&quot;&gt;which is
incorrect.&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I’m still in the process of reading and understanding chord, not to mention
implementing it myself, will do a blog post here once that’s done. I had a lot
of fun learning about consistent hashing, implementing it, not to mention
writing this blog post, hope you learned a thing or do. If you find an error or
think something can be said better, you can tweet me @sent-hil.&lt;/p&gt;
</content>
 </entry>
 

</feed>
